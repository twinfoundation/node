#----------------------------- TWIN Node Config -----------------------------#

# Web Server

TWIN_NODE_PORT=3000
TWIN_NODE_HOST="0.0.0.0"
# TWIN_NODE_CORS_ORIGINS=*
# TWIN_NODE_HTTP_METHODS=
# TWIN_NODE_HTTP_ALLOWED_HEADERS=
# TWIN_NODE_HTTP_EXPOSED_HEADERS=

# Global

## Set DEBUG to true to enable additional information in the logs
TWIN_NODE_DEBUG=true

## The features to enable on the node
##   node-identity: generates an identity for the node if not provided in config.
##   node-user: generates a user for the node if not provided in config.
TWIN_NODE_FEATURES="node-identity,node-user"

# Default Node Identity Details

# Identity for TWIN Node Node
# TWIN_NODE_IDENTITY=""

# Username for TWIN Node Node login, defaults to admin@node
# TWIN_NODE_USERNAME=""

# Username for TWIN Node Node login, defaults to randomly generated, check logs for the generated password
# TWIN_NODE_PASSWORD=""

# The Bip39 mnemonic for creating the seed for the node, defaults to randomly generated, check logs for the generated mnemonic
# TWIN_NODE_MNEMONIC=""

# Storage

## Storage for files will use this directory as its root, in docker you should map this to a mounted volume to be persistent
TWIN_NODE_STORAGE_FILE_ROOT="../../.local-data/twin-node-entity-storage/"

## The file name of the state file, if this file does not exist it will be created with the bootstrap process, defaults to engine-state.json
# TWIN_NODE_STATE_FILENAME=""

#----------------------------- Connector Config -----------------------------#

# AWS DynamoDB

# TWIN_NODE_AWS_DYNAMODB_ACCESS_KEY_ID=""
# TWIN_NODE_AWS_DYNAMODB_SECRET_ACCESS_KEY=""
# TWIN_NODE_AWS_DYNAMODB_REGION=""
# TWIN_NODE_AWS_DYNAMODB_ENDPOINT=""

# Azure CosmosDB

# TWIN_NODE_AZURE_COSMOSDB_ENDPOINT=""
# TWIN_NODE_AZURE_COSMOSDB_KEY=""
# TWIN_NODE_AZURE_COSMOSDB_DATABASE_ID=""
# TWIN_NODE_AZURE_COSMOSDB_CONTAINER_ID=""

# GCP Firestore

# TWIN_NODE_GCP_FIRESTORE_PROJECT_ID=""
# TWIN_NODE_GCP_FIRESTORE_CREDENTIALS=""
# TWIN_NODE_GCP_FIRESTORE_DATABASE_ID=""
# TWIN_NODE_GCP_FIRESTORE_COLLECTION_NAME=""
# TWIN_NODE_GCP_FIRESTORE_ENDPOINT=""

# ScyllaDb

# TWIN_NODE_SCYLLADB_HOSTS=""
# TWIN_NODE_SCYLLADB_LOCAL_DATA_CENTER=""
# TWIN_NODE_SCYLLADB_KEYSPACE=""

# IPFS Connector

# TWIN_NODE_IPFS_API_URL=""
# TWIN_NODE_IPFS_BEARER_TOKEN=""

# AWS S3 Connector

# TWIN_NODE_AWS_S3_ACCESS_KEY_ID=""
# TWIN_NODE_AWS_S3_SECRET_ACCESS_KEY=""
# TWIN_NODE_AWS_S3_REGION=""
# TWIN_NODE_AWS_S3_BUCKET_NAME=""
# TWIN_NODE_AWS_S3_ENDPOINT=""

# Azure Storage Connector

# TWIN_NODE_AZURE_STORAGE_ACCOUNT_NAME=""
# TWIN_NODE_AZURE_STORAGE_ACCOUNT_KEY=""
# TWIN_NODE_AZURE_STORAGE_CONTAINER_NAME=""
# TWIN_NODE_AZURE_STORAGE_ENDPOINT=""

# GCP Storage Connector

# TWIN_NODE_GCP_STORAGE_PROJECT_ID=""
# TWIN_NODE_GCP_STORAGE_CREDENTIALS=""
# TWIN_NODE_GCP_STORAGE_BUCKET_NAME=""
# TWIN_NODE_GCP_STORAGE_ENDPOINT=""

# MySQL Storage Connector

# TWIN_NODE_MY_SQL_HOST=""
# TWIN_NODE_MY_SQL_PORT=3306
# TWIN_NODE_MY_SQL_USER=""
# TWIN_NODE_MY_SQL_PASSWORD=""
# TWIN_NODE_MY_SQL_DATABASE=""

# IOTA DLT

# TWIN_NODE_IOTA_NODE_ENDPOINT=""
# TWIN_NODE_IOTA_FAUCET_ENDPOINT=""
# TWIN_NODE_IOTA_EXPLORER_ENDPOINT=""
# TWIN_NODE_IOTA_NETWORK=""
# TWIN_NODE_IOTA_COIN_TYPE="4218"

# Hashicorp Vault Connector

# TWIN_NODE_HASHICORP_VAULT_ENDPOINT=""
# TWIN_NODE_HASHICORP_VAULT_TOKEN=""

#----------------------------- Connector Types -----------------------------#

# Entity Storage

## Entity Storage can be overridden by each component [file, memory, aws-dynamodb, azure-cosmosdb, gcp-firestoredb, scylladb]
TWIN_NODE_ENTITY_STORAGE_CONNECTOR_TYPE="file"

## Prefix to add to tables in entity storage to separate the data from instances e.g. twin-node-
# TWIN_NODE_ENTITY_STORAGE_TABLE_PREFIX=""

# Entity File Connector

# TWIN_NODE_ENTITY_FILE_ENABLE="false"

# Entity Memory Connector

# TWIN_NODE_ENTITY_MEMORY_ENABLE="false"

# Blob Storage

## Blob Storage can be overridden by each component [memory, file, ipfs, aws-s3, azure-storage, gcp-storage]
TWIN_NODE_BLOB_STORAGE_CONNECTOR_TYPE="file"

## Prefix to add to directories in blob storage
# TWIN_NODE_BLOB_STORAGE_PREFIX=""

## Enable encryption for blob storage, this will encrypt the data before storing it
TWIN_NODE_BLOB_STORAGE_ENABLE_ENCRYPTION=true

## The key to use in the vault for encryption, defaults to blob-encryption
# TWIN_NODE_BLOB_STORAGE_ENCRYPTION_KEY=""

# Blob File Connector

# TWIN_NODE_BLOB_FILE_ENABLE="false"

# Blob Memory Connector

# TWIN_NODE_BLOB_MEMORY_ENABLE="false"

# Logging Connector

## Logging Connector [console,entity-storage]
## You can log to more than one connector my separating them with a comma
TWIN_NODE_LOGGING_CONNECTOR="console,entity-storage"

# Vault Connector

## Vault Connector [entity-storage, hashicorp]
TWIN_NODE_VAULT_CONNECTOR="entity-storage"

# Background Task Connector

## Background Task Connector [entity-storage]
TWIN_NODE_BACKGROUND_TASK_CONNECTOR="entity-storage"

# Event Bus Connector

## Event Bus Connector [local]
TWIN_NODE_EVENT_BUS_CONNECTOR="local"

# Telemetry Connector

## Telemetry Connector [entity-storage]
TWIN_NODE_TELEMETRY_CONNECTOR="entity-storage"

# Faucet Connector

## Faucet Connector Connector [entity-storage, iota]
TWIN_NODE_FAUCET_CONNECTOR="entity-storage"

# Wallet Connector

## Wallet Connector Connector [entity-storage, iota]
TWIN_NODE_WALLET_CONNECTOR="entity-storage"

# Verifiable Storage Connector

## Verifiable Storage Connector [entity-storage, iota]
TWIN_NODE_VERIFIABLE_STORAGE_CONNECTOR="entity-storage"

# NFT Connector

## NFT Connector [entity-storage, iota]
TWIN_NODE_NFT_CONNECTOR="entity-storage"

# Identity Resolver Connector

## Identity Resolver Connector [entity-storage, iota, universal]
TWIN_NODE_IDENTITY_RESOLVER_CONNECTOR="entity-storage"

## Endpoint for universal resolver
# TWIN_NODE_UNIVERSAL_RESOLVER_ENDPOINT=""

# Identity Connector

## Identity Connector [entity-storage, iota]
TWIN_NODE_IDENTITY_CONNECTOR="entity-storage"

# Identity Profile Connector

## Identity Profile Connector [entity-storage]
TWIN_NODE_IDENTITY_PROFILE_CONNECTOR="entity-storage"

# Immutable Proof

## The assertion method from the identity to use in immutable proof operations, defaults to immutable-proof-assertion
# TWIN_NODE_IMMUTABLE_PROOF_ASSERTION_METHOD_ID=""

# Attestation

## Attestation Connector Connector [nft]
TWIN_NODE_ATTESTATION_CONNECTOR="nft"

## The attestation assertion method to use from the DID, defaults to attestation-assertion
# TWIN_NODE_ATTESTATION_ASSERTION_METHOD_ID=""

# Auth Processor

## Auth Admin Type [entity-storage]
TWIN_NODE_AUTH_ADMIN_PROCESSOR_TYPE="entity-storage"

## Auth Type [entity-storage]
TWIN_NODE_AUTH_PROCESSOR_TYPE="entity-storage"

## The key to use for signing in auth operations, defaults to auth-signing
# TWIN_NODE_AUTH_SIGNING_KEY_ID=""

# Messaging

## Messaging Email Connector Connector [entity-storage, aws]
TWIN_NODE_MESSAGING_EMAIL_CONNECTOR="entity-storage"

## Messaging SMS Connector Connector [entity-storage, aws]
TWIN_NODE_MESSAGING_SMS_CONNECTOR="entity-storage"

## Messaging Push Notifications Connector Connector [entity-storage, aws]
TWIN_NODE_MESSAGING_PUSH_NOTIFICATIONS_CONNECTOR="entity-storage"

## The AWS Application for push notifications JSON string version of IAwsApplicationSettings array
# TWIN_NODE_AWS_MESSAGING_PUSH_NOTIFICATION_APPLICATIONS="[]"

# Data Processing

## Data Converters [json,xml]
TWIN_NODE_DATA_CONVERTER_CONNECTORS="json,xml"

## Data Extractors [json-path]
TWIN_NODE_DATA_EXTRACTOR_CONNECTORS="json-path"

# Federated Catalog

## Federated catalog TTL for the cache in ms
# TWIN_NODE_FEDERATED_CATALOG_CACHE_TTL_MS="60000"

## Federated catalog clearing house approver list, stringified array of DIDs.
# TWIN_NODE_FEDERATED_CATALOG_CLEARING_HOUSE_APPROVER_LIST="[]"

## Rights Management
TWIN_NODE_RIGHTS_MANAGEMENT_ENABLED="true"

## Task Scheduler
TWIN_NODE_TASK_SCHEDULER_ENABLED="true"